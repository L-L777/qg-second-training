#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

#define MAX_SIZE 100

typedef struct {
    char data[MAX_SIZE];
    int top;
} Stack;

void push(Stack *stack, char item) {
    stack->data[++stack->top] = item;
}

char pop(Stack *stack) {
    return stack->data[stack->top--];
}

char peek(Stack *stack) {
    return stack->data[stack->top];
}

bool isOperator(char c) {
    return (c == '+' || c == '-' || c == '*' || c == '/');
}

int precedence(char c) {
    if (c == '+' || c == '-') {
        return 1;
    } else if (c == '*' || c == '/') {
        return 2;
    }
    return 0;
}

int calculate(char *expr) {
    Stack operandStack;
    operandStack.top = -1;
    Stack operatorStack;
    operatorStack.top = -1;

    int i = 0;
    while (expr[i] != '\0') {
        if (expr[i] == ' ') {
            i++;
            continue;
        } else if (isdigit(expr[i])) {
            int num = 0;
            while (isdigit(expr[i])) {
                num = num * 10 + (expr[i] - '0');
                i++;
            }
            push(&operandStack, num);
        } else if (expr[i] == '(') {
            push(&operatorStack, expr[i]);
            i++;
        } else if (expr[i] == ')') {
            while (peek(&operatorStack) != '(') {
                char op = pop(&operatorStack);
                int num2 = pop(&operandStack);
                int num1 = pop(&operandStack);
                int result;
                switch (op) {
                    case '+':
                        result = num1 + num2;
                        break;
                    case '-':
                        result = num1 - num2;
                        break;
                    case '*':
                        result = num1 * num2;
                        break;
                    case '/':
                        result = num1 / num2;
                        break;
                }
                push(&operandStack, result);
            }
            pop(&operatorStack); // Pop '('
            i++;
        } else if (isOperator(expr[i])) {
            while (operatorStack.top != -1 && precedence(peek(&operatorStack)) >= precedence(expr[i])) {
                char op = pop(&operatorStack);
                int num2 = pop(&operandStack);
                int num1 = pop(&operandStack);
                int result;
                switch (op) {
                    case '+':
                        result = num1 + num2;
                        break;
                    case '-':
                        result = num1 - num2;
                        break;
                    case '*':
                        result = num1 * num2;
                        break;
                    case '/':
                        result = num1 / num2;
                        break;
                }
                push(&operandStack, result);
            }
            push(&operatorStack, expr[i]);
            i++;
        }
    }

    while (operatorStack.top != -1) {
        char op = pop(&operatorStack);
        int num2 = pop(&operandStack);
        int num1 = pop(&operandStack);
        int result;
        switch (op) {
            case '+':
                result = num1 + num2;
                break;
            case '-':
                result = num1 - num2;
                break;
            case '*':
                result = num1 * num2;
                break;
            case '/':
                result = num1 / num2;
                break;
        }
        push(&operandStack, result);
    }

    return operandStack.data[operandStack.top];
}

int main() {
    char expr[100];
    printf("Enter an expression: ");
    fgets(expr, 100, stdin);

    int result = calculate(expr);
    printf("Result: %d\n", result);

    return 0;
}
